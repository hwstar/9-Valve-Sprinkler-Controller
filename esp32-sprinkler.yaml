#
# Example ESPhome YAML file for the sprinkler controller
#

substitutions:
   # Sprinkler controller name
   sprinkler_controller_name: "sprinkler_controller" # Note: must match name used in external_components/valve_dog/valve_dog.h
   
   # Auto off string for local display  [8 chars max]
   auto_off_string: "AUTO OFF"
   
   # Rain sting for local display [8 chars max]
   rain_string: "RAIN"

   # Idle state strings for local display [16 chars max]
   valves_idle_string: "All Valves OFF"

   # Valve name strings for local display [16 chars max]
   valve_1_on_string: "Valve 1 ON"
   valve_2_on_string: "Valve 2 ON"
   valve_3_on_string: "Valve 3 ON"
   valve_4_on_string: "Valve 3 ON"
   valve_5_on_string: "Valve 5 ON"
   valve_6_on_string: "Valve 6 ON"
   valve_7_on_string: "Valve 7 ON"
   valve_8_on_string: "Valve 8 ON"
   
   # Pump valve name
   pump_valve_name: "Master Valve"
  
   # Valve switch entity names
   valve_1_switch_name: "Valve 1"
   valve_2_switch_name: "Valve 2"
   valve_3_switch_name: "Valve 3"
   valve_4_switch_name: "Valve 4"
   valve_5_switch_name: "Valve 5"
   valve_6_switch_name: "Valve 6"
   valve_7_switch_name: "Valve 7"
   valve_8_switch_name: "Valve 8"
   
   # Pump valve enable name
   pump_valve_enable_name: "Main/Pump Valve Enable"
   
   # Valve enable entity names
   valve_1_enable_name: "Valve Enable 1"
   valve_2_enable_name: "Valve Enable 2"
   valve_3_enable_name: "Valve Enable 3"
   valve_4_enable_name: "Valve Enable 4"
   valve_5_enable_name: "Valve Enable 5"
   valve_6_enable_name: "Valve Enable 6"
   valve_7_enable_name: "Valve Enable 7"
   valve_8_enable_name: "Valve Enable 8"


#
# time
#

time:
  - platform: homeassistant
    id: homeassistant_time

  - platform: sntp
    timezone: America/Los_Angeles
    id: sntp_time
    on_time_sync:
      then:
        - ds1307.write_time
        - logger.log:
            level: INFO
            format:  "Time synchronized. Wrote time to DS1307"
   
  - platform: ds1307
    update_interval: never
    id: ds1307_time
    
    # Use the DS3107 time to trigger watering programs
    
    #
    # Watering program triggers
    #

    on_time:
      # Midnight housekeeping trigger
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - lambda: |-
              id(is_raining) = false;
            
      # Example Watering program # 1  trigger
      
      - seconds: 0
        minutes: 0
        hours: 6
        days_of_week: MON,THU
        then:
          - if:
              condition: # Check for watering script enable and not raining before running the script
                lambda:  |-
                  return (id( automatic_watering_enable ) && !id(is_raining));
              then:
                - script.execute: watering_program_1
 
      # More triggers can be added here.

#
# Front end buttons
#

button:
  # Run watering program 1
  - platform: template
    name: "Run Watering Program 1"
    on_press:
      - wait_until:
           binary_sensor.is_off: sprinklers_running
      - script.execute: watering_program_1
   # Shut them all down 
  - platform: template
    name: "Stop All Sprinklers"
    on_press:
      - sprinkler.shutdown: "${sprinkler_controller_name}"
 
#
# Scripts
#

script:
  # Example watering script (called from time trigger above)
  - id: watering_program_1
    then:
      - sprinkler.clear_queued_valves:
          id: "${sprinkler_controller_name}"
      - sprinkler.queue_valve:
          id: "${sprinkler_controller_name}"
          valve_number: 1
          run_duration: 30s
      - sprinkler.queue_valve:
          id: "${sprinkler_controller_name}"
          valve_number: 2
          run_duration: 30s
      - sprinkler.queue_valve:
          id: "${sprinkler_controller_name}"
          valve_number: 4
          run_duration: 30s
      - sprinkler.start_from_queue:
          id: "${sprinkler_controller_name}"
#
# globals
#

globals:
  - id: valves_status_string
    type: std::string
    restore_value: no
    initial_value: '"${valves_idle_string}"'

  - id: run_state_string
    type: std::string
    restore_value: no
    initial_value: '"IDLE"'
    
  - id: display_ip_address
    type: bool
    restore_value: no
    initial_value: "false"
    
  - id: automatic_watering_enable  # Automatic watering enable/disable
    type: bool
    restore_value: yes
    initial_value: "true"
    
  - id: is_raining  # Is raining
    type: bool
    restore_value: no
    initial_value: "false"
    
  - id: has_fault  # Has fault flag
    type: bool
    restore_value: no
    initial_value: "false"
    

#
# esphome
#

esphome:
  name: esp32-sprinkler
  platform: ESP32
  board: esp32dev
  includes:
    - external_components/valve_dog/valve_dog.h
  on_boot:
    then:
      # Read time from RTC so we have something to start with while we get time form the network.
      # RTC will be updated periodically with time from the Internet
      # or Home Assistant if there is a network connection.
      - ds1307.read_time:
      # LED test
      - output.turn_on: lcd_backlight
      - delay: 10s
      - output.turn_off: fault_led
      - output.turn_off: lcd_backlight

#
# wifi
#

wifi:
  networks:
   - ssid: !secret wifi_ssid
     password: !secret wifi_password
  ap:
    # This is the fallback hotspot used to reconfigure the sprinkler 
    # controller when there are no valid WIFI credentials
    ssid: "Sprinkler Controller Hotspot"
    password: a_long_password

captive_portal:

#
# webserver
#

web_server:
  port: 80
# auth:
#    username: admin
#    password: !secret wifi_password

#
# logger
#

logger:
  level: INFO

#
# api
#

api:
  password: !secret esphome_api_password
  reboot_timeout: 24h
#  encryption:
#          key: !secret api_key
   # Exposed services
  services:
    - service: set_multiplier # Set watering multiplier
      variables:
        multiplier: float
      then:
        - sprinkler.set_multiplier: 
            id: "${sprinkler_controller_name}"
            multiplier: !lambda 'return multiplier;'
    - service: force_shutdown  # Shut down any running sprinklers
      then:
        - sprinkler.shutdown: "${sprinkler_controller_name}"         
        - logger.log:
            level: INFO
            format:  "Shutdown service call received"
#
# ota
#

ota:
  password: !secret esphome_ota_password
  # https://esphome.io/components/ota

#
# custom components
#
custom_component:
  #
  # Valve watchdog
  #
- lambda: |-
    auto valve_dog = new ValveDog();
    return {valve_dog};
#
#  external components
#


external_components:
  - source:
      type: local
      path: custom_components
    components: [ "pca9554", "sprinkler", "lcd_base" ]
#
# sprinkler
#

sprinkler:
  - id: "${sprinkler_controller_name}"
    main_switch: "Sprinklers"
    auto_advance_switch: "Sprinklers Auto Advance"
    valve_overlap: 3s
    pump_start_valve_delay: 3s
   
    valves:
      # This definition for valve 0 (main/pump valve)  has to be here or the other valve ID's will be off by 1.
      - valve_switch: "${pump_valve_name}"
        enable_switch: "${pump_valve_enable_name}"
        run_duration: 10s
        valve_switch_id: valve0
      - valve_switch: "${valve_1_switch_name}"
        enable_switch: "${valve_1_enable_name}"
        run_duration: 10s
        pump_switch_id: valve0
        valve_switch_id: valve1
      - valve_switch: "${valve_2_switch_name}"
        enable_switch: "${valve_2_enable_name}"
        run_duration: 10s
        pump_switch_id: valve0
        valve_switch_id: valve2
      - valve_switch: "${valve_3_switch_name}"
        enable_switch: "${valve_3_enable_name}"
        run_duration: 10s
        pump_switch_id: valve0
        valve_switch_id: valve3
      - valve_switch: "${valve_4_switch_name}"
        enable_switch: "${valve_4_enable_name}"
        run_duration: 10s
        pump_switch_id: valve0
        valve_switch_id: valve4
      - valve_switch: "${valve_5_switch_name}"
        enable_switch: "${valve_5_enable_name}"
        run_duration: 10s
        pump_switch_id: valve0
        valve_switch_id: valve5
      - valve_switch: "${valve_6_switch_name}"
        enable_switch: "${valve_6_enable_name}"
        run_duration: 10s
        pump_switch_id: valve0
        valve_switch_id: valve6
      - valve_switch: "${valve_7_switch_name}"
        enable_switch: "${valve_7_enable_name}"
        run_duration: 10s
        pump_switch_id: valve0
        valve_switch_id: valve7
      - valve_switch: "${valve_8_switch_name}"
        enable_switch: "${valve_8_enable_name}"
        run_duration: 10s
        pump_switch_id: valve0
        valve_switch_id: valve8


#
# 1602 LCD display
#

display:
  - platform: lcd_gpio
    id: the_display
    dimensions: 16x2
    data_pins:
      - GPIO23
      - GPIO25
      - GPIO26
      - GPIO27
    enable_pin: GPIO18
    rs_pin: GPIO17
    # this lambda is required. If it is missing esphome will go into a boot loop.
    lambda: |-
        // Line 0
        // Current run state
        char run_state_string[9];
        run_state_string[8] = 0;
        // Print state, rain, or auto off string
        if(((id(automatic_watering_enable) == false) || (id(is_raining) == true )) && (id(sprinklers_running).state == false))
          if(id(is_raining) == true)
            strcpy(run_state_string, "${rain_string}");
          else
            strcpy(run_state_string, "${auto_off_string}");
        else
          strncpy(run_state_string, id(${sprinkler_controller_name}).current_ctrlr_state_as_str().c_str(), 8);
        it.print(0, 0, run_state_string );
        // Print the current time
        if(id(ds1307_time).is_failed() == false)
          it.strftime(11, 0, "%H:%M", id(ds1307_time).now());
        else
          it.print(11, 0, "--:--");
        // Line 1
        if (id(display_ip_address) == true){
          std::string val = id(our_ip_address).state;
          it.print(0, 1, val.c_str());  // Display IP address instead of valve state
        }
        else {
          // Update current open valve
          if (id(sprinklers_running).state == true)
            // Controller running, so a valve should be open
            it.print(0, 1, id(valves_status_string));
          else
            // No valves open
            it.print(0, 1, id(to_string("${valves_idle_string}")));
        }

#
# i2c
#


i2c:
  sda: 21
  scl: 22
  id: bus_a

#
# pca9554
#


pca9554:
    id: pca9554_valves_1_8
    address: 0x38 # For the PCA9554A part

#
# switch
#

switch:
  - platform: restart
    name: "Reboot Sprinkler Controller"
  
  - platform: template
    name: "Sprinkler Automatic Watering Enable"
    lambda: |-
       return ( id(automatic_watering_enable) );
    turn_on_action:
      - lambda: |-
           id(automatic_watering_enable) = true;
      - logger.log:
           format: "Automatic watering enabled"
           level: "INFO"
         
    turn_off_action:
       - lambda: |-
           id(automatic_watering_enable) = false;
       - logger.log:
           format: "Automatic watering disabled"
           level: "INFO"
           
  - platform: template
    name: "Sprinkler Rain Disable Switch"
    lambda: |-
       return ( id(is_raining) );
    turn_on_action:
      - lambda: |-
           id(is_raining) = true;
      - logger.log:
           format: "It is raining"
           level: "INFO"
         
    turn_off_action:
       - lambda: |-
           id(is_raining) = false;
       - logger.log:
           format: "It is not raining"
           level: "INFO"
         

# Valve 0 - Pump or master valve
  - platform: gpio
    id: valve0
    pin:
      number: GPIO19
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log:
        format: "Pump Valve 0 on"
        level: "INFO"
    on_turn_off:
    - logger.log:
        format: "Pump Valve 0 off"
        level: "INFO"


# Valve 1
  - platform: gpio
    id: valve1
    pin:
      pca9554: pca9554_valves_1_8
      number: 0
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log:
        format: "Valve 1 turned on"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valve_1_on_string}");

    on_turn_off:
    - logger.log:
        format: "Valve 1 turned off"
        level: "INFO"

 # Valve 2
  - platform: gpio
    id: valve2
    pin:
      pca9554: pca9554_valves_1_8
      number: 1
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log:
        format: "Valve 2 turned on"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valve_2_on_string}");

    on_turn_off:
    - logger.log:
        format: "Valve 2 turned off"
        level: "INFO"


 # Valve 3
  - platform: gpio
    id: valve3
    pin:
      pca9554: pca9554_valves_1_8
      number: 2
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log:
        format: "Valve 3 turned on"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valve_3_on_string}");

    on_turn_off:
    - logger.log:
        format: "Valve 3 turned off"
        level: "INFO"



 # Valve 4
  - platform: gpio
    id: valve4
    pin:
      pca9554: pca9554_valves_1_8
      number: 3
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log:
        format: "Valve 4 turned on"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valve_4_on_string}");

    on_turn_off:
    - logger.log:
        format: "Valve 4 turned off"
        level: "INFO"

 # Valve 5
  - platform: gpio
    id: valve5
    pin:
      pca9554: pca9554_valves_1_8
      number: 4
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log:
        format: "Valve 5 turned on"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valve_5_on_string}");

    on_turn_off:
    - logger.log:
        format: "Valve 5 turned off"
        level: "INFO"


 # Valve 6
  - platform: gpio
    id: valve6
    pin:
      pca9554: pca9554_valves_1_8
      number: 5
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log:
        format: "Valve 6 turned on"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valve_6_on_string}");

    on_turn_off:
    - logger.log:
        format: "Valve 6 turned off"
        level: "INFO"

 # Valve 7
  - platform: gpio
    id: valve7
    pin:
      pca9554: pca9554_valves_1_8
      number: 6
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log:
        format: "Valve 7 turned on"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valve_7_on_string}");

    on_turn_off:
    - logger.log:
        format: "Valve 7 turned off"
        level: "INFO"


 # Valve 8

  - platform: gpio
    id: valve8
    pin:
      pca9554: pca9554_valves_1_8
      number: 7
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log:
        format: "Valve 8 turned on"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valve_8_on_string}");

    on_turn_off:
    - logger.log:
        format: "Valve 8 turned off"
        level: "INFO"


#
# output
#

output:
  # LCD backlight
  - platform: gpio
    id: lcd_backlight
    pin:
      number: GPIO13
      mode:
        output: true
      inverted: false
  # Fault LED
  - platform: gpio
    id : fault_led
    pin:
      number: GPIO14
      mode:
        output: true
      inverted: false


#
# binary sensor
#

binary_sensor:
  # Overcurrent fault
  - platform: template
    device_class: problem
    id: has_overcurrent_fault
    name: "Has Overcurrent Fault"
    lambda:
      return id(has_fault);

  # Controller is running binary sensor
  - platform: template
    device_class: running
    id: sprinklers_running
    name: "Sprinklers Running"
    lambda:
      return id(${sprinkler_controller_name}).active_valve().has_value();


 # Front panel button 1 - LCD backlight/Start Watering program
  - platform: gpio
    id: button1
    pin:
      number: GPIO32
      mode:
        input: true
      inverted: true
    filters:
      delayed_on_off: 10ms
    on_click:
      - min_length: 50ms
        max_length: 350ms
        then:
          - output.turn_on: lcd_backlight
          - delay: 30s
          - output.turn_off: lcd_backlight
      - min_length: 500ms
        max_length: 2000ms
        then:
          - logger.log:
              format:    "Watering program 1 started from local button"
              level:  INFO
          - script.execute: watering_program_1
     

# Front panel button 2 - Stop all watering programs
  - platform: gpio
    id: button2
    pin:
      number: GPIO33
      mode:
        input: true
      inverted: true
    filters:
      delayed_on_off: 10ms
    on_click:
      - min_length: 500ms
        max_length: 2000ms
        then:
          - logger.log:
              format:    "Watering stopped from local button"
              level:  INFO
          - sprinkler.shutdown: "${sprinkler_controller_name}"
       
        

# Front panel button 3   - Clear fault/ show ip address
  - platform: gpio
    id: button3
    pin:
      number: GPIO34
      mode:
        input: true
      inverted: true
    filters:
      delayed_on_off: 10ms 
    on_press:
      then:
        - output.turn_off: fault_led
        - lambda: |-
            id(has_fault) = false;
            id(display_ip_address) = true;
    on_release:
      then:
        - lambda: |-
            id(display_ip_address) = false;
        

#
# sensor
#


sensor:
# Valve Current sensor
  - platform: adc
    pin: GPIO36
    attenuation: auto
    update_interval: 500ms
    id: iadc
    name: "Total valve current"
    unit_of_measurement: "A"
    filters:
        # 2.02 volts per amp
        # convert Apk to Arms
      - lambda: |-
          float a = (x/2.02)*0.707;
          if (a < 0.08)
            return 0.0;
          else
            return a;
    on_value_range:
        - above: 1.0 # 1 Amp. A reasonable value when 3 valves are on at the same time
          then:
            - sprinkler.shutdown: "${sprinkler_controller_name}"
            - logger.log:
                format:    "Overcurrent fault!"
                level:  ERROR
            - output.turn_on: fault_led
            - lambda: |-
                id(has_fault) = true;
#
# Text Sensor
#
            
text_sensor:
  # Local text sensor to allow the display to show the IP Address
  - platform: wifi_info
    ip_address: 
      id: our_ip_address
    


