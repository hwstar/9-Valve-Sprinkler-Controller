
substitutions:
  # Idle state strings for local display [16 chars max]
   valves_idle_string: "All Valves OFF" 
   valve_0_on_string: "Valve 0 ON" 
   valve_1_on_string: "Valve 1 ON" 
   valve_2_on_string: "Valve 2 ON" 
   valve_3_on_string: "Valve 3 ON"
   valve_4_on_string: "Valve 4 ON"    
   valve_5_on_string: "Valve 5 ON" 
   valve_6_on_string: "Valve 6 ON" 
   valve_7_on_string: "Valve 7 ON" 
   valve_8_on_string: "Valve 8 ON" 
  
globals:
  - id: valves_status_string
    type: std::string
    restore_value: no  
    initial_value: '"${valves_idle_string}"'
    
  - id: run_state_string
    type: std::string
    restore_value: no  
    initial_value: '"IDLE"'

esphome:
  name: esp32-sprinkler
  platform: ESP32
  board: esp32dev
  on_boot:
    then:
      # LED test
      - ds1307.read_time:
      - output.turn_on: fault_led
      - output.turn_on: lcd_backlight
      - delay: 2s
      - output.turn_off: fault_led
      - output.turn_off: lcd_backlight
      
  
    
wifi:
  use_address: 192.168.31.224
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
    - ssid: !secret sec_wifi_ssid
      password: !secret sec_wifi_password

web_server:
  port: 80
  # https://esphome.io/components/web_server.html


 # https://esphome.io/components/logger
logger:
  level: INFO

api:
  password: !secret esphome_api_password
  # https://esphome.io/components/api
  reboot_timeout: 24h


ota:
  password: !secret esphome_ota_password
  # https://esphome.io/components/ota

time:
  - platform: homeassistant
    id: homeassistant_time
  
  - platform: sntp
    timezone: America/Los_Angeles
    id: sntp_time 
    on_time_sync:
      then:
        - ds1307.write_time
    
  - platform: ds1307
    update_interval: never
    id: ds1307_time
 
external_components:
  - source:
      type: local
      path: custom_components/pca9554
  - source:
      type: local
      path:  custom_components/sprinkler
  
 
# Example minimal configuration entry
sprinkler:
  - id: sprinkler_ctrlr
    main_switch: "Sprinklers"
    auto_advance_switch: "Sprinklers Auto Advance"
    valves:
      - valve_switch: "Valve 0"
        enable_switch: "Enable Valve 0"
        run_duration: 30s
        valve_switch_id: valve0
      - valve_switch: "Valve 1"
        enable_switch: "Enable Valve 1"
        run_duration: 30s
        valve_switch_id: valve1
      - valve_switch: "Valve 2"
        enable_switch: "Enable Valve 2"
        run_duration: 30s
        valve_switch_id: valve2
      - valve_switch: "Valve 3"
        enable_switch: "Enable Valve 3"
        run_duration: 30s
        valve_switch_id: valve3
      - valve_switch: "Valve 4"
        enable_switch: "Enable Valve 4"
        run_duration: 30s
        valve_switch_id: valve4
      - valve_switch: "Valve 5"
        enable_switch: "Enable Valve 5"
        run_duration: 30s
        valve_switch_id: valve5
      - valve_switch: "Valve 6"
        enable_switch: "Enable Valve 6"
        run_duration: 30s
        valve_switch_id: valve6
      - valve_switch: "Valve 7"
        enable_switch: "Enable Valve 7"
        run_duration: 30s
        valve_switch_id: valve7
      - valve_switch: "Valve 8"
        enable_switch: "Enable Valve 8"
        run_duration: 30s
        valve_switch_id: valve8
        
        

# 1602 LCD display
display:
  - platform: lcd_gpio
    id: the_display
    dimensions: 16x2
    data_pins:
      - GPIO23
      - GPIO25
      - GPIO26
      - GPIO27
    enable_pin: GPIO18
    rs_pin: GPIO17
    # this lambda is required. If it is missing esphome will go into a boot loop.
    lambda: |-
        // Line 0
        // Current run state
        char run_state_string[9];
        run_state_string[8] = 0;
        strncpy(run_state_string, id(sprinkler_ctrlr).current_ctrlr_state_as_str().c_str(), 8);
        it.print(0, 0, run_state_string );
        // Print the current time
        it.strftime(11, 0, "%H:%M", id(sntp_time).now());
        // Line 1
        it.print(0, 1, id(valves_status_string));
i2c:
  sda: 21
  scl: 22
  id: bus_a


    
pca9554:
    id: pca9554_valves_1_8
    address: 0x38 # For the PCA9554A part

switch:
  - platform: restart
    name: "Reboot Sprinkler Controller"
  
# Valve 0
  - platform: gpio
    id: valve0
    pin:
      number: GPIO19
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log: 
        format: "Valve 0 turned on"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valve_0_on_string}");

    on_turn_off:
    - logger.log: 
        format: "Valve 0 turned off"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valves_idle_string}");
 
# Valve 1  
  - platform: gpio
    id: valve1
    pin:
      pca9554: pca9554_valves_1_8
      number: 0
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log: 
        format: "Valve 1 turned on"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valve_1_on_string}");

    on_turn_off:
    - logger.log: 
        format: "Valve 1 turned off"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valves_idle_string}");
  
 # Valve 2      
  - platform: gpio
    id: valve2
    pin:
      pca9554: pca9554_valves_1_8
      number: 1
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log: 
        format: "Valve 2 turned on"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valve_2_on_string}");

    on_turn_off:
    - logger.log: 
        format: "Valve 2 turned off"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valves_idle_string}");
 
 # Valve 3  
  - platform: gpio
    id: valve3
    pin:
      pca9554: pca9554_valves_1_8
      number: 2
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log: 
        format: "Valve 3 turned on"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valve_3_on_string}");

    on_turn_off:
    - logger.log: 
        format: "Valve 3 turned off"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valves_idle_string}");  
      
  
 # Valve 4    
  - platform: gpio
    id: valve4
    pin:
      pca9554: pca9554_valves_1_8
      number: 3
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log:
        format: "Valve 4 turned on"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valve_4_on_string}");

    on_turn_off:
    - logger.log: 
        format: "Valve 4 turned off"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valves_idle_string}");
  
 # Valve 5
  - platform: gpio
    id: valve5
    pin:
      pca9554: pca9554_valves_1_8
      number: 4
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log: 
        format: "Valve 5 turned on"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valve_5_on_string}");

    on_turn_off:
    - logger.log: 
        format: "Valve 5 turned off"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valves_idle_string}");
  
 # Valve 6 
  - platform: gpio
    id: valve6
    pin:
      pca9554: pca9554_valves_1_8
      number: 5
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log: 
        format: "Valve 6 turned on"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valve_6_on_string}");

    on_turn_off:
    - logger.log: 
        format: "Valve 6 turned off"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valves_idle_string}");

 # Valve 7
  - platform: gpio
    id: valve7
    pin:
      pca9554: pca9554_valves_1_8
      number: 6
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log: 
        format: "Valve 7 turned on"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valve_7_on_string}");

    on_turn_off:
    - logger.log:
        format: "Valve 7 turned off"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valves_idle_string}");
      
 # Valve 8

  - platform: gpio
    id: valve8
    pin:
      pca9554: pca9554_valves_1_8
      number: 7
      mode:
        output: true
      inverted: false
    on_turn_on:
    - logger.log: 
        format: "Valve 8 turned on"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valve_8_on_string}");

    on_turn_off:
    - logger.log: 
        format: "Valve 8 turned off"
        level: "INFO"
    - lambda: |-
        id(valves_status_string) = to_string("${valves_idle_string}");
   
output:   
  # LCD backlight
  - platform: gpio
    id: lcd_backlight
    pin:
      number: GPIO13
      mode:
        output: true
      inverted: false
  # Fault LED
  - platform: gpio
    id : fault_led
    pin:
      number: GPIO14
      mode:
        output: true
      inverted: false 
   

binary_sensor:
  # Controller is running binary sensor
  - platform: template
    name: "Sprinklers Running"
    lambda:
      return id(sprinkler_ctrlr).is_running();
  

 # Button 1 - LCD backlight
  - platform: gpio
    id: button1
    pin:
      number: GPIO32
      mode:
        input: true
      inverted: true
    filters:
      delayed_on_off: 10ms
    on_press:
      output.turn_on: lcd_backlight
    on_release:
      then:
       -  delay: 30s
       -  output.turn_off: lcd_backlight
      
# Button 2
  - platform: gpio
    id: button2
    pin:
      number: GPIO33
      mode:
        input: true
      inverted: true
    filters:
      delayed_on_off: 10ms
      
# Button 3   - Clear fault 
  - platform: gpio
    id: button3
    pin:
      number: GPIO34
      mode:
        input: true
      inverted: true
    filters:
      delayed_on_off: 1s  #Must be pressed for 1 second
    on_press:
      then: 
        - output.turn_off: fault_led
       
      
   
sensor:
    # Valve Current sensor
  - platform: adc
    pin: GPIO36
    attenuation: auto
    update_interval: 500ms
    id: iadc
    name: "Total valve current"
    unit_of_measurement: "A"
    filters:
        # 2.02 volts per amp
        # convert Apk to Arms
      - lambda: |-
          float a = (x/2.02)*0.707;
          // Temporary clip to 0  until ESP32 devices received with factory ADC calibration.
          if (a < 0.08)
            return 0.0;
          else
            return a;
    on_value_range:
        - above: 0.8
          then:
            - sprinkler.shutdown: sprinkler_ctrlr
            - logger.log:
                format:    "Overcurrent fault!"
                level:  ERROR            
            - output.turn_on: fault_led
          
            
  
    
    